#!/bin/bash

###> Colors ###
RED_COLOR='\033[0;31m'
GREEN_COLOR='\033[0;32m'
YELLOW_COLOR='\033[0;33m'
CYAN_COLOR='\033[0;36m'
COLOR_OFF='\033[0m'
YELLOW_COLOR_BG='\033[43m'
###< Colors ###

###> Making version ###
WORKDIR="."
VERSION_FILE=$WORKDIR/VERSION
if [ ! -f "$VERSION_FILE" ]; then
  touch $VERSION_FILE
  echo -e "${YELLOW_COLOR}WARNING${COLOR_OFF}: Created ${CYAN_COLOR}$VERSION_FILE${COLOR_OFF} cause of not found";
    VERSION="$(git describe --tags --abbrev=0)"
    echo $VERSION > $VERSION_FILE
fi
VERSION="$(cat $VERSION_FILE)"
VERSION=${VERSION:1}
VERSION_MAJOR=0
VERSION_MINOR=0
VERSION_PATCH=0
VERSION_TYPES_TAGS="major, minor, patch"
VERSION_MESSAGE=""

PUSH_TO_GIT=1 # Push to git by default
FORCE=0 # Make it 1 to skip confirmation

IFS='.'  # space is set as delimiter
read -ra VERSION_PARTS <<< "$VERSION"   # str is read into an array as tokens separated by IFS

INDEX=0
for i in "${VERSION_PARTS[@]}"; do   # access each element of array
  if [ $INDEX == 0 ]; then
    VERSION_MAJOR=$i
  fi
  if [ $INDEX == 1 ]; then
    VERSION_MINOR=$i
  fi
  if [ $INDEX == 2 ]; then
    VERSION_PATCH=$i
  fi

  (( INDEX++ ))
done

if [ -n "$1" ]; then
  case "$1" in
  patch)
    VERSION_MESSAGE="Making patch"
    (( VERSION_PATCH++ ))
    ;;
  minor)
    VERSION_MESSAGE="Making minor"
    VERSION_PATCH=0
    (( VERSION_MINOR++ ))
    ;;
  major)
    echo -e "${RED_COLOR}WARNING${COLOR_OFF}: ${YELLOW_COLOR}Going to build major! Please ensure your doing...${COLOR_OFF}";
    VERSION_MESSAGE="Making major"
    VERSION_PATCH=0
    VERSION_MINOR=0
    (( VERSION_MAJOR++ ))
    ;;
  *)
    echo -e "${RED_COLOR}ERROR${COLOR_OFF}: \"$1\" is unknown version type. Available: ${VERSION_TYPES_TAGS}"
    exit 128
    ;;
  esac
else
  echo -e "${RED_COLOR}ERROR${COLOR_OFF}: provider version type of [${VERSION_TYPES_TAGS}]"
  exit 128
fi

###> Customize version ###
PREFIX=""
while [ -n "$1" ]
do

# Development state
case "$1" in
-pa)
  PREFIX="-pre-alpha"
  ;;
esac
case "$1" in
-a)
  PREFIX="-alpha"
  ;;
esac
case "$1" in
-b)
  PREFIX="-beta"
  ;;
esac
case "$1" in
-rc)
  PREFIX="-release-candidate"
  ;;
esac

# Version description
case "$1" in
-m | --message)
  if [ ! "$2" ]; then
    echo -e "${RED_COLOR}ERROR${COLOR_OFF}: provide message text"
    exit 128
  fi
  echo -e "You specified version with description ${YELLOW_COLOR}\"$2\"${COLOR_OFF}"
  MESSAGE=$2
  ;;
esac

# Meta information
case "$1" in
-mt)
  if [ ! "$2" ]; then
    echo -e "${RED_COLOR}ERROR${COLOR_OFF}: provide metadata"
    exit 128
  fi
  # Append custom meta to prefix
  PREFIX="$PREFIX+$2"
  ;;
esac

# Other options
case "$1" in
-f)
  # Skip confirmation
  FORCE=1
  ;;
esac

# Define push to git or not
case "$2" in
local)
  # Local version
  PUSH_TO_GIT=0
  ;;
esac

shift
done
###< Customize version ###

# Warning message where version will be released
if [ "$PUSH_TO_GIT" == 1 ]; then
  echo "-----------------------------------------"
  echo -e "| ${YELLOW_COLOR}WARNING${COLOR_OFF}: ${VERSION_MESSAGE} with remote tag |"
  echo "-----------------------------------------"
else
  echo "------------------------------------------------"
  echo -e "| ${YELLOW_COLOR}WARNING${COLOR_OFF}: ${VERSION_MESSAGE} only in ${CYAN_COLOR}${VERSION_FILE}${COLOR_OFF} file |"
  echo "------------------------------------------------"
fi

# Define version name
VERSION="v$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH$PREFIX"

# Confirming
# shellcheck disable=SC2162
if [ "$FORCE" == 0 ]; then
  echo -e "Going to make ${YELLOW_COLOR_BG}$VERSION${COLOR_OFF}"
  read -p "Do you wish to release? [y/N]: " yn
      case $yn in
          [Yy]* );;
          * )
            echo -e "${RED_COLOR}Aborted${COLOR_OFF}";
            exit 0
            ;;
      esac
fi

echo "$VERSION" > "$VERSION_FILE"
###< Making version ###

###> Deploying ###
# Git branch for version
if [ "$PUSH_TO_GIT" == 1 ]; then
  BRANCH=$(git rev-parse --abbrev-ref HEAD)
  if [ ! "$BRANCH" ]; then
      echo -e "${RED_COLOR}ERROR${COLOR_OFF}: local git branch not specified!"
      exit 1
  fi
  if [ "$BRANCH" != "master" ] && [ "$BRANCH" != "main" ]; then
    echo -e "${YELLOW_COLOR}WARNING${COLOR_OFF}: you checked out ${CYAN_COLOR}$BRANCH${COLOR_OFF} git branch!"
    # shellcheck disable=SC2162
    read -p "Continue? [y/N]: " yn
        case $yn in
            [Yy]* );;
            * )
              echo -e "${RED_COLOR}Aborted${COLOR_OFF}";
              exit 0
              ;;
        esac
    exit 1;
  fi

  if [ ! -d ./.git ]; then
      echo -e "${RED_COLOR}ERROR${COLOR_OFF}: .git folder not found!"
      exit 1
  fi

  git fetch --tags
  if [ "$MESSAGE" ]; then
    git tag -a "$VERSION" -m "$MESSAGE" && \
    git push && \
    git push origin --tags && \
    echo -e "${GREEN_COLOR}SUCCESS${COLOR_OFF}: $VERSION released to origin!${COLOR_OFF}"
  else
    git tag -a "$VERSION" -m "$MESSAGE" && \
    git push && \
    git push --tags && \
    echo -e "${GREEN_COLOR}SUCCESS${COLOR_OFF}: $VERSION released to origin!${COLOR_OFF}"
  fi
else
    echo -e "${GREEN_COLOR}SUCCESS${COLOR_OFF}: $VERSION created at local!${COLOR_OFF}"
fi
###< Deploying ###